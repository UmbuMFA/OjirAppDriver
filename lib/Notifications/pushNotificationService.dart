import 'package:assets_audio_player/assets_audio_player.dart';import 'package:driver_app/Models/rideDetails.dart';import 'package:driver_app/Notifications/notificationDialog.dart';import 'package:driver_app/configMaps.dart';import 'package:driver_app/main.dart';import 'package:firebase_core/firebase_core.dart';import 'package:firebase_database/firebase_database.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'dart:io' show Platform;import 'package:firebase_core/firebase_core.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:http/http.dart' as http;import 'package:flutter_local_notifications/flutter_local_notifications.dart';import 'package:http/http.dart';import 'message.dart';import 'message_list.dart';import 'permissions.dart';import 'token_monitor.dart';import 'firebase_options.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';class PushNotificationService {  final FirebaseMessaging firebaseMessaging = FirebaseMessaging.instance;  late AndroidNotificationChannel channel;  late FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin;  Future initialize(context) async {    channel = const AndroidNotificationChannel(      'high_importance_channel', // id      'High Importance Notifications', // title      importance: Importance.high,    );    flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();    await flutterLocalNotificationsPlugin        .resolvePlatformSpecificImplementation<            AndroidFlutterLocalNotificationsPlugin>()        ?.createNotificationChannel(channel);    await FirebaseMessaging.instance        .setForegroundNotificationPresentationOptions(      alert: true,      badge: true,      sound: true,    );    FirebaseMessaging.instance        .getInitialMessage()        .then((RemoteMessage? message) {      if (message != null) {        retrieveRideRequestInfo(getRideRequestId(message.toMap()), context);      }    });    FirebaseMessaging.onMessage.listen((RemoteMessage message) {      RemoteNotification? notification = message.notification;      AndroidNotification? android = message.notification?.android;      if (notification != null && android != null && !kIsWeb) {        flutterLocalNotificationsPlugin.show(          notification.hashCode,          notification.title,          notification.body,          NotificationDetails(            android: AndroidNotificationDetails(              channel.id,              channel.name,              // TODO add a proper drawable resource to android, for now using              icon: 'launch_background',            ),          ),        );        retrieveRideRequestInfo(getRideRequestId(message.toMap()), context);      }    });    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {      print('A new onMessageOpenedApp event was published!');      Navigator.pushNamed(        context,        '/message',        arguments: MessageArguments(message, true),      );      retrieveRideRequestInfo(getRideRequestId(message.toMap()), context);    });  }  String getRideRequestId(Map<String, dynamic> message) {    String rideRequestId = "";    if (Platform.isAndroid) {      rideRequestId = message['data']['ride_request_id'];    } else {      rideRequestId = message['ride_request_id'];    }    return rideRequestId;  }  void retrieveRideRequestInfo(String rideRequestId, BuildContext context) {    newRequestsRef.child(rideRequestId).once().then((event) {      if (event.snapshot.value != null) {        assetsAudioPlayer.open(Audio("sounds/alert.mp3"));        assetsAudioPlayer.play();        double pickUpLocationLat = double.parse(            event.snapshot.child("pickup").child("latitude").value.toString());        double pickUpLocationLng = double.parse(            event.snapshot.child("pickup").child("longitude").value.toString());        String pickUpAddress =            event.snapshot.child("pickup_address").value.toString();        // double dropOffLocationLat = double.parse(        //     event.snapshot.child("dropoff").child("latitude").value.toString());        // double dropOffLocationLng = double.parse(event.snapshot        //     .child("dropoff")        //     .child("longitude")        //     .value        //     .toString());        // String dropOffAddress =        //     event.snapshot.child("dropoff_address").value.toString();        String paymentMethod =            event.snapshot.child("payment_method").value.toString();        String rider_name = event.snapshot.child("rider_name").value.toString();        String rider_phone =            event.snapshot.child("rider_phone").value.toString();        RideDetails rideDetails = RideDetails();        rideDetails.ride_request_id = rideRequestId;        rideDetails.pickup_address = pickUpAddress;        // rideDetails.dropoff_address = dropOffAddress;        rideDetails.pickup = LatLng(pickUpLocationLat, pickUpLocationLng);        // rideDetails.dropoff = LatLng(dropOffLocationLat, dropOffLocationLng);        rideDetails.payment_method = paymentMethod;        rideDetails.rider_name = rider_name;        rideDetails.rider_phone = rider_phone;        print("Information :: ");        print(rideDetails.pickup_address);        print(rideDetails.dropoff_address);        showDialog(          context: context,          barrierDismissible: false,          builder: (BuildContext context) => NotificationDialog(            rideDetails: rideDetails,          ),        );      }    });  }}